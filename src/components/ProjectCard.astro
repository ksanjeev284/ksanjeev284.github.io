---
import type { Project } from '../data/projects';

interface Props {
  project: Project;
}

const { project } = Astro.props;
const fallbackImage = "/project-images/placeholder.svg";
const apiKey = import.meta.env.PUBLIC_SCREENSHOT_API_KEY;

console.log('API Key in component:', apiKey); // Debug log

// Function to generate screenshot URL with error handling
function generateScreenshotUrl(url: string, isMobile = false, apiKey: string) {
  try {
    const params = new URLSearchParams({
      'access_key': apiKey,
      'url': url,
      'full_page': 'false',
      'format': 'jpg',
      'quality': '100',
      ...(isMobile 
        ? { 'device': 'iPhone 12 Pro' }
        : { 
            'viewport_width': '1920',
            'viewport_height': '1080',
            'device_scale_factor': '1'
          }
      )
    });
    return `https://api.screenshotone.com/take?${params}`;
  } catch (error) {
    console.error('Error generating screenshot URL:', error);
    return null;
  }
}

const screenshotUrl = generateScreenshotUrl(project.url, false, apiKey);
const mobileScreenshotUrl = generateScreenshotUrl(project.url, true, apiKey);

---

<div class="project-card">
  <div class="project-image">
    <img 
      src={project.image} 
      alt={`${project.title} preview`}
      onerror={`this.onerror=null; this.src='${fallbackImage}'`}
      class="main-image"
      loading="lazy"
    />
    <div class="screenshot-preview">
      <button 
        class="preview-button" 
        data-url={project.url}
        data-api-key={apiKey}
        data-title={project.title}
      >
        View Live Preview
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M15 14l5-5-5-5"></path>
          <path d="M4 20v-7a4 4 0 014-4h12"></path>
        </svg>
      </button>
    </div>
  </div>
  <div class="project-content">
    <h3>{project.title}</h3>
    <p>{project.description}</p>
    <div class="tags">
      {project.tags.map(tag => (
        <span class="tag">{tag}</span>
      ))}
    </div>
    <a href={project.url} target="_blank" rel="noopener noreferrer" class="view-project">
      View Project
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path>
        <polyline points="15 3 21 3 21 9"></polyline>
        <line x1="10" y1="14" x2="21" y2="3"></line>
      </svg>
    </a>
  </div>
</div>

<style>
  .project-card {
    background: white;
    border-radius: 1rem;
    overflow: hidden;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease;
  }

  .project-card:hover {
    transform: translateY(-5px);
  }

  .project-image {
    position: relative;
    width: 100%;
    height: 200px;
    overflow: hidden;
  }

  .main-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .project-card:hover .main-image {
    transform: scale(1.05);
  }

  .screenshot-preview {
    position: absolute;
    bottom: 1rem;
    right: 1rem;
  }

  .preview-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: rgba(0, 0, 0, 0.8);
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 2rem;
    cursor: pointer;
    font-size: 0.9rem;
    transition: background-color 0.3s ease;
  }

  .preview-button:hover {
    background: rgba(0, 0, 0, 0.9);
  }

  .project-content {
    padding: 1.5rem;
  }

  h3 {
    margin: 0 0 0.5rem 0;
    color: var(--accent);
  }

  p {
    margin: 0 0 1rem 0;
    color: #666;
    font-size: 0.95rem;
    line-height: 1.5;
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }

  .tag {
    background: var(--accent-light);
    color: var(--accent-dark);
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    font-size: 0.85rem;
  }

  .view-project {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--accent);
    text-decoration: none;
    font-weight: 500;
    transition: color 0.3s ease;
  }

  .view-project:hover {
    color: var(--accent-dark);
  }
</style>

<script>
  function initializePreviewButtons() {
    const buttons = document.querySelectorAll('.preview-button');
    buttons.forEach(button => {
      if (button instanceof HTMLElement) {
        button.addEventListener('click', async (event) => {
          event.preventDefault();
          const url = button.dataset.url;
          const apiKey = button.dataset.apiKey;
          const title = button.dataset.title;
          
          if (url && apiKey) {
            try {
              await openScreenshots(event, url, apiKey, title);
            } catch (error) {
              console.error('Error generating preview:', error);
              showError(new Error('Unable to generate preview at this time. Please try visiting the project URL directly.'));
            }
          }
        });
      }
    });
  }

  async function openScreenshots(event: Event, url: string, apiKey: string, title: string) {
    const loadingModal = showLoading();
    
    try {
      // Test the screenshot API first
      const testUrl = 'https://api.screenshotone.com/take?' + new URLSearchParams({
        'access_key': apiKey,
        'url': url,
        'format': 'jpg'
      });

      const testResponse = await fetch(testUrl);
      if (!testResponse.ok) {
        throw new Error('Screenshot service is unavailable. Please try again later.');
      }

      // Continue with screenshot preview...
      const desktopUrl = generateScreenshotUrl(url, false, apiKey);
      const mobileUrl = generateScreenshotUrl(url, true, apiKey);

      loadingModal.remove();
      showPreviewModal(title, desktopUrl, mobileUrl);
    } catch (error) {
      loadingModal.remove();
      throw error;
    }
  }

  function generateScreenshotUrl(url: string, isMobile: boolean, apiKey: string) {
    const params = new URLSearchParams({
      'access_key': apiKey,
      'url': url,
      'full_page': 'false',
      'format': 'jpg',
      'quality': '100',
      ...(isMobile 
        ? { 'device': 'iPhone 12 Pro' }
        : { 
            'viewport_width': '1920',
            'viewport_height': '1080',
            'device_scale_factor': '1'
          }
      )
    });
    return `https://api.screenshotone.com/take?${params}`;
  }

  function showLoading() {
    const modal = document.createElement('div');
    modal.className = 'loading-modal';
    modal.innerHTML = `
      <div class="loading-content">
        <div class="loading-spinner"></div>
        <p>Generating preview...</p>
      </div>
    `;

    const style = document.createElement('style');
    style.textContent = `
      .loading-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
      }
      .loading-content {
        background: white;
        padding: 2rem;
        border-radius: 1rem;
        text-align: center;
      }
      .loading-spinner {
        width: 40px;
        height: 40px;
        margin: 0 auto 1rem;
        border: 4px solid #f3f3f3;
        border-top: 4px solid #3498db;
        border-radius: 50%;
        animation: spin 1s linear infinite;
      }
      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
    `;
    document.head.appendChild(style);
    document.body.appendChild(modal);
    return modal;
  }

  function showPreviewModal(title: string, desktopUrl: string, mobileUrl: string) {
    const modal = document.createElement('div');
    modal.className = 'preview-modal';
    modal.innerHTML = `
      <div class="preview-content">
        <h3>${title}</h3>
        <div class="preview-tabs">
          <button class="tab-button active" data-view="desktop">Desktop</button>
          <button class="tab-button" data-view="mobile">Mobile</button>
        </div>
        <div class="preview-frame">
          <img src="${desktopUrl}" alt="Desktop preview" class="preview-image desktop active">
          <img src="${mobileUrl}" alt="Mobile preview" class="preview-image mobile">
        </div>
      </div>
    `;

    const style = document.createElement('style');
    style.textContent = `
      .preview-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.9);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
      }
      .preview-content {
        background: white;
        padding: 2rem;
        border-radius: 1rem;
        max-width: 90%;
        max-height: 90vh;
        overflow: auto;
      }
      .preview-content h3 {
        margin: 0 0 1rem;
        text-align: center;
      }
      .preview-tabs {
        display: flex;
        justify-content: center;
        gap: 1rem;
        margin-bottom: 1rem;
      }
      .tab-button {
        padding: 0.5rem 1rem;
        border: none;
        background: #f3f3f3;
        border-radius: 0.5rem;
        cursor: pointer;
      }
      .tab-button.active {
        background: #3498db;
        color: white;
      }
      .preview-frame {
        position: relative;
        width: 100%;
        height: 60vh;
      }
      .preview-image {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: contain;
        display: none;
      }
      .preview-image.active {
        display: block;
      }
    `;
    document.head.appendChild(style);
    document.body.appendChild(modal);

    // Handle tab switching
    const tabs = modal.querySelectorAll('.tab-button');
    tabs.forEach(tab => {
      tab.addEventListener('click', () => {
        const view = tab.getAttribute('data-view');
        tabs.forEach(t => t.classList.remove('active'));
        tab.classList.add('active');
        modal.querySelectorAll('.preview-image').forEach(img => {
          img.classList.remove('active');
          if (img.classList.contains(view!)) {
            img.classList.add('active');
          }
        });
      });
    });

    // Close on outside click
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.remove();
        style.remove();
      }
    });
  }

  function showError(error: Error) {
    const modal = document.createElement('div');
    modal.className = 'error-modal';
    modal.innerHTML = `
      <div class="error-content">
        <h3>Preview Unavailable</h3>
        <p>${error.message}</p>
        <button class="close-button">Close</button>
      </div>
    `;

    const style = document.createElement('style');
    style.textContent = `
      .error-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
      }
      .error-content {
        background: white;
        padding: 2rem;
        border-radius: 1rem;
        max-width: 500px;
        width: 90%;
        text-align: center;
      }
      .error-content h3 {
        color: #dc2626;
        margin: 0 0 1rem 0;
      }
      .error-content p {
        margin: 0 0 1.5rem 0;
        color: #4b5563;
      }
      .close-button {
        padding: 0.5rem 1rem;
        background: #e5e7eb;
        border: none;
        border-radius: 0.5rem;
        cursor: pointer;
        font-weight: 500;
        color: #374151;
      }
      .close-button:hover {
        background: #d1d5db;
      }
    `;
    document.head.appendChild(style);
    document.body.appendChild(modal);

    // Close on button click or outside click
    const closeButton = modal.querySelector('.close-button');
    closeButton?.addEventListener('click', () => {
      modal.remove();
      style.remove();
    });
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.remove();
        style.remove();
      }
    });
  }

  // Initialize when the DOM is ready
  document.addEventListener('DOMContentLoaded', initializePreviewButtons);
</script>